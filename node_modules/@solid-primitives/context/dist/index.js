import { createContext, createComponent, useContext } from 'solid-js';

// src/index.ts
function createContextProvider(factoryFn, defaults) {
  const ctx = createContext(defaults);
  return [
    (props) => {
      return createComponent(ctx.Provider, {
        value: factoryFn(props),
        get children() {
          return props.children;
        }
      });
    },
    () => useContext(ctx)
  ];
}
function MultiProvider(props) {
  const { values } = props;
  const fn = (i) => {
    let item = values[i];
    if (!item)
      return props.children;
    const ctxProps = {
      get children() {
        return fn(i + 1);
      }
    };
    if (Array.isArray(item)) {
      ctxProps.value = item[1];
      item = item[0];
      if (typeof item !== "function")
        item = item.Provider;
    }
    return createComponent(item, ctxProps);
  };
  return fn(0);
}

export { MultiProvider, createContextProvider };
